OTT_SOURCE = Lambdaqs
OTT_LOC    = .
FILES      = Lambdaqs_ott Lambdaqs_inf
OTTFILES   = $(foreach i, Lambdaqs, $(OTT_LOC)/$(i).ott)
OTTIFLAGS  = $(foreach i, Lambdaqs, -i $(OTT_LOC)/$(i).ott)

###################### COQ ##############################

## Paths to executables. Do not include options here.
## Modify these to suit your Coq installation, if necessary.

COQC = coqc
COQDEP = coqdep

LIBNAME=Lambdaqs
LNGEN=lngen

## Include directories, one per line.

INCDIRS = \
        . \


## Library name used for the imports in Coq



## Name of the submakefile generated by coq_makefile
COQMKFILENAME=CoqSrc.mk

VFILES   = $(foreach i, $(FILES), $(i).v)
VOFILES  = $(foreach i, $(FILES), $(i).vo)
INCFLAGS = $(foreach i, $(INCDIRS), -I $(i))

# .SECONDARY: $(VFILES)

all: coq

quick:  $(COQMKFILENAME)
	@$(MAKE) -f CoqSrc.mk quick


coq: $(VFILES) $(COQMKFILENAME)
	@$(MAKE) -f CoqSrc.mk


%.vo: %.v
	@$(MAKE) -f CoqSrc.mk $*.vo


%_ott.v: $(OTT_LOC)/%.ott Makefile
	ott -i $(OTT_LOC)/$*.ott  -o $*_ott.v -coq_lngen true -coq_expand_list_types true
	make METALIB.FIX_$*_ott

%_inf.v: $(OTT_LOC)/%.ott Makefile
	$(LNGEN) --coq-no-proofs --coq $*_inf.v --coq-ott $*_ott $(OTT_LOC)/$*.ott

%_inf_proofs.v: $(OTT_LOC)/%.ott Makefile
	$(LNGEN) --coq $*_inf_proofs.v --coq-ott $*_ott $(OTT_LOC)/$*.ott


$(COQMKFILENAME): Makefile $(shell ls *.v | grep -v _ott.v | grep -v _inf.v)
	{ echo "-R . $(LIBNAME) " ; ls *.v ; } > _CoqProject && coq_makefile -arg '-w -variable-collision,-meta-collision,-require-in-module' -f _CoqProject -o $(COQMKFILENAME)


pdf: $(OTT_LOC)/$(OTT_SOURCE).ott
	ott -show_sort true -show_defns true -i $(OTT_LOC)/$(OTT_SOURCE).ott -o $(OTT_LOC)/$(OTT_SOURCE).tex
	texfot pdflatex $(OTT_LOC)/$(OTT_SOURCE).tex

coqclean:
	@rm -if *.v.d *.vo *.glob *.v-e *.vok *.vos *.conf *.v-e $(VOFILES) $(COQMKFILENAME)

clean: coqclean
	@rm -f *~
	@rm -f *.log *.aux *.fls *.fdb_latexmk
	@rm -f $(VFILES)
	@rm -f *.pdf *.tex

METALIB.FIX_%:
	sed -i -e 's/Metalib.Metatheory./Metalib.Metatheory. Require Export Metalib.LibLNgen. /g' $*.v
	sed '1d' $*.v > __TMP__; mv __TMP__ $*.v
