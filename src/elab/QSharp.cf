entrypoints Doc;
comment "//";

Prog. Doc ::= [Nmspace];

-- Namespace

NDec . Nmspace ::= "namespace" QName "{" [NSElmnt] "}";

terminator Nmspace "";
terminator NSElmnt "";

QUnqual. QName ::= UndIdent;
QQual.   QName ::= QIdent;


separator nonempty UndIdent ".";

NSOp   . NSElmnt ::= "open" QName ";";
NSOpAs . NSElmnt ::= "open" QName "as" QName ";";
NSTy   . NSElmnt ::= DeclPrefix "newtype" UndIdent "=" UType ";" ;
NSCall . NSElmnt ::= DeclPrefix CallDec;

DPrefix. DeclPrefix ::= [Attr] Access;

AAttr. Attr ::= "@" Exp;

terminator Attr "";

AEmpty    . Access ::= ;
AInternal . Access ::= "internal";

-- Type Declaration

UTTpl  . UType ::= "(" [TyTplItem] ")";
UTETyp . UType ::= Typ;

separator TyTplItem ",";

TTIName. TyTplItem ::= NamedItem;
TTIUTyp. TyTplItem ::= UType;

NItem . NamedItem ::= UndIdent ":" Typ;

-- Callable Declaration

CDFun . CallDec ::= "function" UndIdent TyArg ParamTpl ":" Typ Body;
CDOp  . CallDec ::= "operation" UndIdent TyArg ParamTpl ":" Typ Chars Body;

TAEmpty . TyArg ::= ;
TAList  . TyArg ::= "<" [TIdent] ">";

separator TIdent ",";

ParTpl . ParamTpl ::= "(" [Param] ")";

separator Param ",";

ParNI  . Param ::= NamedItem;
ParNIA . Param ::= ParamTpl ;

CEmpty. Chars ::= ;
CIs.    Chars ::= "is" CharsExp;

CEAdj.   CharsExp ::= "Adj";
CECtl.   CharsExp ::= "Ctl";
CEParen. CharsExp ::= "(" CharsExp ")";
CETimes. CharsExp ::= CharsExp "*" CharsExp;
CEPlus.  CharsExp ::= CharsExp "+" CharsExp;

separator Spec "";

BSpec.  Body ::= "{" [Spec] "}";
BScope. Body ::= Scope;

SSpec. Spec ::= SpecName SpecGen;

SNBody.   SpecName ::= "body";
SNAdj.    SpecName ::= "adjoint";
SNCtl.    SpecName ::= "controlled";
SNCtlAdj. SpecName ::= "controlled" "adjoint";

SGScope.  SpecGen ::= Scope;
SGImpl.   SpecGen ::= SpecParamTpl Scope;
SGAuto.   SpecGen ::= "auto" ";";
SGSelf.   SpecGen ::= "self" ";";
SGInvert. SpecGen ::= "invert" ";";
SGDist.   SpecGen ::= "distribute" ";";
SGIntr.   SpecGen ::= "intrinsic" ";";

SpecParTpl. SpecParamTpl ::= "(" [SpecParam] ")";

separator SpecParam ",";

SPVar.   SpecParam ::= UndIdent;
SPSubst. SpecParam ::= "...";
SPTpl.   SpecParam ::= SpecParamTpl;

Scp . Scope ::= "{" [Stm] "}";

separator Stm "";

-- Types
TEmp  . Typ ::= "_";
TPar  . Typ ::= TIdent;
TQNm  . Typ ::= QName;
TTpl  . Typ ::= "(" [Typ] ")";
TFun  . Typ ::= Typ "->" Typ;
TOp   . Typ ::= Typ "=>" Typ Chars;
TArr  . Typ ::= Typ "[" "]";
TBInt . Typ ::= "BigInt";
TBool . Typ ::= "Bool"  ;
TDbl  . Typ ::= "Double";
TInt  . Typ ::= "Int"   ;
TPli  . Typ ::= "Pauli" ;
TQbit . Typ ::= "Qubit" ;
TRng  . Typ ::= "Range" ;
TRes  . Typ ::= "Result";
TStr  . Typ ::= "String";
TUnit . Typ ::= "Unit"  ;

separator Typ ",";

-- Statement
SExp.    Stm ::= Exp ";";
SRet.    Stm ::= "return" Exp";";
SFail.   Stm ::= "fail" Exp";";
SLet.    Stm ::= "let" Bnd "=" Exp ";";
SMut.    Stm ::= "mutable" Bnd "=" Exp ";";
SSet.    Stm ::= "set" Bnd "=" Exp ";";
SSetOp.  Stm ::= "set" UndIdent SetOp Exp ";";
SSetW.   Stm ::= "set" UndIdent "w/=" Exp "<-" Exp ";";
SIf.     Stm ::= "if" Exp Scope;
SEIf.    Stm ::= "elif" Exp Scope;
SElse.   Stm ::= "else" Scope;
SFor.    Stm ::= "for" Bnd "in" Exp Scope;
SWhile.  Stm ::= "while" Exp Scope;
SRep.    Stm ::= "repeat" Scope;
SUntil.  Stm ::= "until" Exp ";";
SUntilF. Stm ::= "until" Exp "fixup" Scope;
SWithin. Stm ::= "within" Scope;
SApply.  Stm ::= "apply" Scope;
SUse.    Stm ::= "use" QbitBnd ";";
SUseS.   Stm ::= "use" QbitBnd Scope;

SoPow.    SetOp ::= "^=";
SoMul.    SetOp ::= "*=";
SoDiv.    SetOp ::= "/=";
SoMod.    SetOp ::= "%=";
SoAdd.    SetOp ::= "+=";
SoSub.    SetOp ::= "-=";
SoShiftR. SetOp ::= ">>>=";
SoShiftL. SetOp ::= "<<<=";
SoBAnd.   SetOp ::= "&&&";
SoBXor.   SetOp ::= "^^^=";
SoBOr.    SetOp ::= "|||=";
SoLAnd.   SetOp ::= "and=";
SoLOr.    SetOp ::= "or=";

BndWild . Bnd ::= "_";
BndName . Bnd ::= UndIdent;
BndTplA . Bnd ::= "(" [Bnd] ")";

separator Bnd ",";

QBnd. QbitBnd ::= Bnd "=" QbitInit;

QInitS. QbitInit ::= "Qubit" "(" ")";
QInitA. QbitInit ::= "Qubit" "[" Exp "]";
QInitT. QbitInit ::= "(" [QbitInit] ")";

separator QbitInit ",";

-- Expressions
--ELamFn.   Exp22 ::= "(" Bnd "->" Exp22 ")"; -- TODO function lambdas
EEmp.     Exp22 ::= "_";
EName.    Exp22 ::= QName;
ENameT.   Exp22 ::= QName "<" [Typ] ">"; -- TODO conflicting with ELt in several tests
EInt.     Exp22 ::= Integer;
EDbl.     Exp22 ::= Double;
EStr.     Exp22 ::= String;
EStrI.    Exp22 ::= "$" String;
EBool.    Exp22 ::= BoolL;
ERes.     Exp22 ::= ResL;
EPli.     Exp22 ::= PliL;
ETp.      Exp22 ::= "(" [Exp] ")";
EArr.     Exp22 ::= "[" [Exp] "]";
ESArr.    Exp22 ::= "[" Exp "," "size" "=" Exp "]";
ELamFn.   Exp21   ::= Bnd "->" Exp21 ; -- TODO function lambdas
ELamOp.   Exp21   ::= Bnd "=>" Exp21 ; -- TODO operation lambdas
-- see git:qsharp-compiler/src/QsCompiler/TextProcessor/QsKeywords.fs
-- Combinators (calls and array items) & Modifiers (functors and unwrap)
EItem.    Exp20 ::= Exp20 "::" UndIdent;     -- 1100
EIndex.   Exp20 ::= Exp20 "[" Exp "]";    -- 1100
EUnwrap.  Exp19 ::= Exp19 "!";            -- 1000
ECtrl.    Exp18 ::= "Controlled" Exp18;   -- 951
EAdj.     Exp18 ::= "Adjoint" Exp18;      -- 950
ECall.    Exp17 ::= Exp17 "(" [Exp] ")";  -- 900
-- Operators
ENeg.     Exp16 ::= "-"   Exp16;          -- 45
ELNot.    Exp16 ::= "not" Exp16;          -- 45
EBNot.    Exp16 ::= "~~~" Exp16;          -- 45
EPow.     Exp15 ::= Exp16 "^" Exp15;
EMul.     Exp14 ::= Exp14 "*" Exp15;
EDiv.     Exp14 ::= Exp14 "/" Exp15;
EMod.     Exp14 ::= Exp14 "%" Exp15;
EAdd.     Exp13 ::= Exp13 "+" Exp14; --(assocs to left?)
ESub.     Exp13 ::= Exp13 "-" Exp14;
EShiftR.  Exp12 ::= Exp12 ">>>" Exp13;
EShiftL.  Exp12 ::= Exp12 "<<<" Exp13;
EGt.      Exp11 ::= Exp11 ">"  Exp12;
EGte.     Exp11 ::= Exp11 ">=" Exp12;
ELt.      Exp11 ::= Exp11 "<"  Exp12;
ELte.     Exp11 ::= Exp11 "<=" Exp12;
EEq.      Exp10 ::= Exp10 "==" Exp11;
ENeq.     Exp10 ::= Exp10 "!=" Exp11;
EBAnd.    Exp9  ::= Exp9 "&&&" Exp10;
EBXor.    Exp8  ::= Exp8 "^^^" Exp9;
EBOr.     Exp7  ::= Exp7 "|||" Exp8;
ELAnd.    Exp6  ::= Exp6 "and" Exp7;
ELOr.     Exp5  ::= Exp5 "or" Exp6;
ECond.    Exp4  ::= Exp5 "?" Exp "|" Exp4;  -- 5
ERange.   Exp3  ::= Exp3 ".." Exp4;         -- 2
ERangeR.  Exp2  ::= Exp2 "...";
ERangeL.  Exp1  ::= "..." Exp1;
ERangeLR. Exp   ::= "...";                  -- 2
EUpdate.  Exp   ::= Exp "w/" Exp "<-" Exp1; -- 1

coercions Exp 21 ;

separator Exp ",";

BTru . BoolL ::= "true";
BFls . BoolL ::= "false";

ROne  . ResL ::= "One";
RZero . ResL ::= "Zero";

PliI  . PliL ::= "PauliI";
PliX  . PliL ::= "PauliX";
PliY  . PliL ::= "PauliY";
PliZ  . PliL ::= "PauliZ";

token TIdent '\'' letter (letter | digit | '_' | '\'')*;
token QIdent letter (letter | digit | '_')* ('.' letter (letter | digit | '_')*)+;


--For some reason, just having these lines here breaks things??? even if they are not called. Why does this happen? 
token UndIdent ('_' | letter) (letter | digit | '_' | '\'')*;
-- this should be the same as UndIdent but its not??
-- token TestIdent letter (letter | digit | '_' | '\'')*;  
