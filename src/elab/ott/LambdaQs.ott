% Lambda Q# grammar without polymorphism or arrays,
% but along with measurement command
% The LambdaQs.cf grammar should correspond to this file on completion.

% Written by Kartik Singhal and Sarah Marshall following Bob Harper's PFPL

metavar x {{ tex \textcolor{black}{x} }}                                                    ::= {{ com term variable }}
metavar q {{ tex \textcolor{YellowOrange}{q} }}, r {{ tex \textcolor{YellowOrange}{r} }}    ::= {{ com qubit symbols }}
metavar U {{ tex \textcolor{CarnationPink}{U} }}, V {{ tex \textcolor{CarnationPink}{V} }}  ::= {{ com unitary symbols }}
metavar l                                                                                   ::= {{ com label }}

indexvar i, j, n, n_a {{ tex n_a }}, n_b {{ tex n_b }} ::= {{ com indices }}

embed {{ tex-preamble
  \usepackage[mathx]{mathabx}

  \usepackage[dvipsnames]{xcolor}

  \usepackage{stackengine}
  \usepackage{scalerel}
  \stackMath
  \newcommand{\ccdot}{\scalebox{1.15}{$\SavedStyle\cdot$} }
  \newcommand{\altdiv}{\mathbin{\ThisStyle{%
    \stackunder[-.25\LMex]{\stackon[-.15\LMex]{\SavedStyle\sim}{\ccdot} }{\ccdot} } } }
}}

grammar

Typ, t {{ tex \textcolor{black}{\tau} }} :: '' ::= {{ com Types }}
  | qbit                                        :: M :: qubit
    {{ com \textcolor{RoyalBlue}{qbit}, opaque qubit type }}
  | qref [ q ]                                  ::   :: qubitRef
    {{ com \textcolor{RoyalBlue}{qref}, qubit reference type }}
  | arr ( t1 ; t2 )                             ::   :: function
    {{ com $[[t1]]~\textcolor{RoyalBlue}{\rightarrow}~[[t2]]$ }}
  | cmd ( t )                                   ::   :: command
    {{ com \textcolor{RoyalBlue}{$[[t]]$ cmd} }}
  | prod ( </ li c-> ti // i IN 1 .. n /> )     ::   :: product
    {{ com \textcolor{RoyalBlue}{$\bigtimes_{l \in L}\,\tau_l$} }}
  | sum ( </ li c-> ti // , // i IN 1 .. n /> ) :: M :: sum
    {{ com \textcolor{RoyalBlue}{$\bigplus_{l \in L}\,\tau_l$} }}
  | bool                                        ::   :: bool
    {{ com \textcolor{RoyalBlue}{bool} }}
  | unit                                        ::   :: unit
    {{ com \textcolor{RoyalBlue}{unit} }}

Exp, e {{ tex \textcolor{black}{e} }} :: '' ::=  {{ com Expressions }}
  | x                                                      ::   :: variable
    {{ com \textcolor{RoyalBlue}{$[[x]]$} }}
  | let ( e1 ; x . e2 )                                    ::   :: definition
    (+ bind x in e2 +)
    {{ com \textcolor{RoyalBlue}{let}~$[[x]]$~\textcolor{RoyalBlue}{be}~$[[e1]]$~\textcolor{RoyalBlue}{in}~$[[e2]]$ }}
  | lam { t } ( x .  e )                                   ::   :: abstraction
    (+ bind x in e +)
    {{ com \textcolor{RoyalBlue}{$\lambda([[x]]:[[t]])[[e]]$} }}
  | ap ( e1 ; e2 )                                         ::   :: application
    {{ com $[[e1]]\textcolor{RoyalBlue}{(}[[e2]]\textcolor{RoyalBlue}{)}$ }}
  | cmd ( m )                                              ::   :: encapsulation
    {{ com \textcolor{RoyalBlue}{cmd $[[m]]$}, encapsulation }}
  | qloc [ q ]                                             ::   :: qubitLocation
    {{ com \textcolor{RoyalBlue}{\&$[[q]]$}, qubit location }}
  | tpl ( </ li c-> ei // , // i IN 1 .. n /> )            ::   :: tuple
    {{ com \textcolor{RoyalBlue}{$\langle e_l \rangle_{l \in L}$} }}
  | pr [ li ] ( e )                                        ::   :: projection
    {{ com \textcolor{RoyalBlue}{$[[e]] \cdot l$} }}
  | in [ li ] { </ ti // , // i IN 1 .. n /> } ( e )       :: M :: injection
    {{ com \textcolor{RoyalBlue}{$l \cdot [[e]]$} }}
  % TODO: here xi's may need to bound in ei's
  | case ( e ; </ li c-> xi . ei // , // i IN 1 .. n /> )  :: M :: caseAnalysis
    {{ com \textcolor{RoyalBlue}{case $[[e]]\,\{ l \cdot x_l \hookrightarrow e_l \}_{l \in L}$} }}
  | true                                                   ::   :: true
    {{ com \textcolor{RoyalBlue}{true} }}
  | false                                                  ::   :: false
    {{ com \textcolor{RoyalBlue}{false} }}
  | if ( e ; e1 ; e2 )                                     ::   :: ite
    {{ com \textcolor{RoyalBlue}{if}~$[[e]]$~\textcolor{RoyalBlue}{then}~$[[e1]]$~\textcolor{RoyalBlue}{else}~$[[e2]]$ }}
  | not e                                                  ::   :: negation
    {{ com \textcolor{RoyalBlue}{$\neg~[[e]]$} }}
  | triv                                                   ::   :: trivial
    {{ com \textcolor{RoyalBlue}{$\langle \rangle$} }}
  | [ e1 / x ] e2                                          :: M :: subst
    {{ com substitution }}
  | ( e )                                                  :: M :: paren
    {{ com parentheses }}

Cmd, m {{ tex \textcolor{black}{m} }} :: '' ::= {{ com Commands }}
  | ret ( e )                 ::   :: return                             {{ com \textcolor{RoyalBlue}{ret $[[e]]$} }}
  | bnd ( e ; x . m )         ::   :: sequence       (+ bind x in m +)   {{ com \textcolor{RoyalBlue}{bnd $[[x]] \leftarrow [[e]] ; [[m]]$} }}
  | newqref [ q ]             ::   :: newqref                            {{ com \textcolor{RoyalBlue}{new()} }}
  | gateapr [ U ] ( e )       ::   :: gateAppRef                         {{ com \textcolor{RoyalBlue}{$[[U]]$$([[e]])$}, gate application }}
  | diagapr [ U , V ] ( e1 ; e2 )   ::   :: diagAppRef
    {{ com \textcolor{RoyalBlue}{D($[[U]],[[V]]$)}\textcolor{RoyalBlue}{(}$[[e1]]$\textcolor{RoyalBlue}{,} $[[e2]]$\textcolor{RoyalBlue}{)}, block diagonal }}
  | measr ( e )               ::   :: measRef                            {{ com \textcolor{RoyalBlue}{meas$([[e]])$}, measure qbit }}
  | dcl ( q . m )             :: M :: newQubit                           {{ com \textcolor{RoyalBlue}{dcl $[[q]]$ in $[[m]]$}, new (opaque) qubit }} % (+ bind q in m +)
  | gateap [ U , q ]          :: M :: gateApp                            {{ com gate application (opaque) }}
  | meas [ q ]                :: M :: meas                               {{ com measure qbit (opaque) }}
  | [ e / x ] m               :: M :: substCmd                           {{ com substitution }}

Sugar, s :: '' ::= {{ com Derived forms }}
  | { x <- m1 ; m2 }    :: :: SeqComp
  | do e                :: :: Do
  | proc ( x : t ) m    :: :: Procedure
  | call e1 ( e2 )      :: :: Call
  | t1 => t2            :: :: Operation

G {{ tex \Gamma }} :: 'G_' ::= {{ com Typing context }}
  | empty                 ::  :: empty
  | G , x : t             ::  :: term

Sigma, sig {{ tex \Sigma }} :: 'S_' ::= {{ com Signature }}
  | empty               ::  :: empty
  | sig , q ~ qbit      ::  :: qbitsymbol

terminals :: 'terminals_' ::=
  | |-                  ::  :: turnstile  {{ tex \vdash }}            {{ com entails }}
  | |-->                ::  :: transition {{ tex \longmapsto }}       {{ com transition }}
  | c->                 ::  :: hrarrow    {{ tex \hookrightarrow }}   {{ com mapping }}
  | c.                  ::  :: cdot       {{ tex \cdot }}             {{ com projection }}
  | ~                   ::  :: sim        {{ tex \sim }}              {{ com tilde }}
  | ~.                  ::  :: dottilde   {{ tex \altdiv }}           {{ com dotted tilde }}
  | empty               ::  :: empty      {{ tex \varnothing }}       {{ com empty context }}
  | <=                  ::  :: leq        {{ tex \leq }}              {{ com less than or equal }}
  | <-                  ::  :: larrow     {{ tex \leftarrow }}
  | :=                  ::  :: define     {{ tex \triangleq }}        {{ com defined as }}
  | =>                  ::  :: darrow     {{ tex \Rightarrow }}       {{ com operation type }}

grammar
formula :: formula_ ::=
  | judgement            :: :: judgement
  | formula1 .. formulan :: :: dots
  | 1 <= i <= n          :: :: bounds

defns
Jdefined :: '' ::=
  defn
  s := user_syntax               :: :: deftypes :: '' {{ com Derived forms / syntactic sugar }} by

    ---------------------------------:: SeqComp
    {x<-m1; m2} := bnd(cmd(m1); x.m2)

    ------------------------:: Do
    do e := bnd(e; x.ret(x))

    --------------------------------:: Procedure
    proc (x:t) m := lam{t}(x.cmd(m))

    -----------------------------:: Call
    call e1(e2) := do (ap(e1;e2))

    ----------------------------:: OperationType
    t1 => t2 := arr(t1; cmd(t2))

defns
Jstatics :: '' ::=

  defn
  G |- e : t :: :: etyping :: ty_ {{ com Expression Typing }} by

    ----------------- :: Var
    G, x : t |- x : t

    G |- e1 : t1
    G, x : t1 |- e2 : t2
    ---------------------- :: Let
    G |- let(e1; x.e2) : t2

    G, x : t1 |- e : t2
    -------------------------------- :: Lam
    G |- lam{t1}(x.e) : arr(t1; t2)

    G |- e1 : arr(t2; t)
    G |- e2 : t2
    -------------------- :: Ap
    G |- ap(e1; e2) : t

    </ G |- ei : ti // i IN 1..n />
    --------------------------------------------------------------------------- :: Tpl
    G |- tpl(</ li c-> ei // i IN 1..n />) : prod(</ li c-> ti // i IN 1..n />)

    G |- e : prod(</ li c-> ti // i IN 1..n />)
    1 <= i <= n
    ------------------------------------------- :: Pr
    G |- pr[li](e) : ti

    G |- e : ti
    1 <= i <= n
    ------------------------------------------------------------------------- :: Inj
    G |- in[li]{</ ti // i IN 1..n />}(e) : sum(</ li c-> ti // i IN 1..n />)

    G |- e : sum(</ li c-> ti // i IN 1..n />)
    </ G, xi : ti |- ei : t // i IN 1..n />
    --------------------------------------------------- :: Case
    G |- case(e; </ li c-> xi . ei // i IN 1..n />) : t

  defn
  G |- sig e : t :: :: estyping :: tyS_ {{ com Expression Typing wrt Signature }} {{ tex [[G]] \vdash_{[[sig]]} [[e]] : [[t]] }} by

    G |- sig m ~. t
    ------------------------ :: Cmd
    G |- sig cmd(m) : cmd(t)

    --------------------------------- :: QLoc
    G |- sig,q~qbit qloc[q] : qref[q]

  defn
  G |- sig m ~. t :: :: cmdFormation :: cmd_ {{ com Well formed command w/ return type $[[t]]$ }} {{ tex [[G]] \vdash_{[[sig]]} [[m]]\ \altdiv\ [[t]] }} by

    G |- sig e : t
    -------------------- :: Ret
    G |- sig ret(e) ~. t

    G |- sig e : cmd(t)
    G, x:t |- sig m ~. t'
    ------------------------- :: Bnd
    G |- sig bnd(e;x.m) ~. t'

    G |- sig,q~qbit m ~. t
    ----------------------- :: Dcl
    G |- sig dcl(q.m) ~. t

    G |- sig,q~qbit m ~. t
    -------------------------------------- :: NewQRef
    G |- sig bnd(cmd(newqref[q]);x.m) ~. t

    ----------------------------------- :: GateAp
    G |- sig,q~qbit gateap[U,q] ~. unit

    G |- sig e:qref[q]
    ------------------------------ :: GateApRef
    G |- sig gateapr[U](e) ~. unit

    G |- sig e1:qref[q]
    G |- sig e2:qref[r]
    ------------------------------------ :: DiagApRef
    G |- sig diagapr[U,V](e1;e2) ~. unit

    ------------------------------- :: Meas
    G |- sig,q~qbit meas[q] ~. bool

    G |- sig e:qref[q]
    ------------------------- :: MeasRef
    G |- sig measr(e) ~. bool

defns
Jdynamics :: '' ::=

  defn
  e val :: :: values :: v_ {{ com Values }} by

    --------------- :: Lam
    lam{t}(x.e) val

    </ ei val // i IN 1..n />
    ------------------------------------- :: Tpl
    tpl(</ li c-> ei // i IN 1..n />) val

    e val
    -------------------------------------- :: Inj
    in[li]{</ ti // i IN 1 .. n />}(e) val

  defn
  e val sig :: :: svalues :: vS_ {{ com Values wrt Signature }} {{ tex [[e]]\ \textbf{val}_{[[sig]]} }} by

    -------------- :: Cmd
    cmd(m) val sig

    ---------------------- :: QLoc
    qloc[q] val sig,q~qbit

  defn
  e |--> e' :: :: trans :: tr {{ com Transition }} by

    e1 |--> e1'
    --------------------------------- :: Let1
    let(e1; x.e2) |--> let(e1'; x.e2)

    e1 val
    --------------------------- :: LetInstr
    let(e1; x.e2) |--> [e1/x]e2

    e1 |--> e1'
    --------------------------- :: Ap1
    ap(e1; e2) |--> ap(e1'; e2)

    e1 val
    e2 |--> e2'
    --------------------------- :: Ap2
    ap(e1; e2) |--> ap(e1; e2')

    e2 val
    ----------------------------------- :: ApInstr
    ap(lam{t2}(x.e1); e2) |--> [e2/x]e1

    </ ei val // i IN 1..n_a />
    e |--> e'
    ------------------------------------------------------------------------------------------------------------------------------------------------------------------- :: Tpl
    tpl(</ li c-> ei // i IN 1..n_a />, l c-> e, </ lj' c-> ej' // j IN 1..n_b />) |--> tpl(</ li c-> ei // i IN 1..n_a />, l c-> e', </ lj' c-> ej' // j IN 1..n_b />)

    e |--> e'
    ------------------------- :: Pr
    pr[li](e) |--> pr[li](e')

    tpl(</ li c-> ei // i IN 1..n />) val
    1 <= j <= n
    ------------------------------------------------- :: PrInstr
    pr[lj](tpl(</ li c-> ei // i IN 1..n />)) |--> ej

    e |--> e'
    ----------------------------------------------------------------------- :: Inj
    in[li]{</ ti // i IN 1..n />}(e) |--> in[li]{</ ti // i IN 1..n />}(e')

    e |--> e'
    --------------------------------------------------------------------------------------- :: Case
    case(e; </ li c-> xi.ei // i IN 1..n />) |--> case(e'; </ li c-> xi.ei // i IN 1..n />)

    in[lj]{</ ti // i IN 1..n />}(e) val
    1 <= j <= n
    ------------------------------------------------------------------------------------- :: CaseInstr
    case(in[lj]{</ ti // i IN 1..n />}(e); </ li c-> xi.ei // i IN 1..n />) |--> [e/xj]ej

  defn
  e |--> sig e' :: :: Strans :: trS_ {{ com Transition wrt Signature }} {{ tex [[e]] \underset{[[sig]]}{\longmapsto} [[e']] }} by

  defn
  m final sig :: :: final :: fn_ {{ com State $[[m]]$ is complete }} {{ tex [[m]]\ \textbf{final}_{[[sig]]} }} by

    e val sig
    ---------------- :: Ret
    ret(e) final sig

  defn
  m |--> sig m' :: :: Stransmu :: st {{ com State transition }} {{ tex [[m]] \underset{[[sig]]}{\longmapsto} [[m']] }} by

    e |--> sig e'
    ----------------------- :: Ret1
    ret(e) |--> sig ret(e')

    e |--> sig e'
    ------------------------------- :: Bnd1
    bnd(e;x.m) |--> sig bnd(e';x.m)

    e val sig
    ------------------------------------ :: BndInstr
    bnd(cmd(ret(e));x.m) |--> sig [e/x]m

    m1 |--> sig m1'
    --------------------------------------------- :: Bnd2
    bnd(cmd(m1);x.m2) |--> sig bnd(cmd(m1');x.m2)

    % TODO: consider newqref as sugar for dcl or provide an explicit rule
    e val sig,q~qbit
    ----------------------------- :: Dcl
    dcl(q.ret(e)) |--> sig ret(e)

    e |--> sig e'
    ------------------------------------- :: GateApRef1
    gateapr[U](e) |--> sig gateapr[U](e')

    ----------------------------------------------- :: GateApRefInstr
    gateapr[U](qloc[q]) |--> sig,q~qbit gateap[U,q]

    e |--> sig e'
    --------------------------- :: MeasRef1
    measr(e) |--> sig measr(e')

    -------------------------------------- :: MeasInstr
    measr(qloc[q]) |--> sig,q~qbit meas[q]
