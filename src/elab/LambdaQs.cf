-- Expressions (need to be first to mark entrypoint)
EVar.  Exp ::= Var;
ENat.  Exp ::= Integer;
EPlus. Exp ::= Exp "+" Integer;
ETriv. Exp ::= "()";
EQloc. Exp ::= "&" Sym;
ELet.  Exp ::= "let" Var "be" Exp "in" Exp;
ELam.  Exp ::= "\\" "(" Var ":" Typ ")" Exp;
EAp.   Exp ::= Exp "(" Exp ")";
ECmd.  Exp ::= "cmd" Cmd;

-- Metavariables
MVar. Var ::= Ident;
MSym. Sym ::= Ident;
MUni. Uni ::= Ident;
MKey. Key ::= Ident;

-- Types
TQbit. Typ ::= "qbit";
TQref. Typ ::= "qref" "[" Key "]";
TParr. Typ ::= "parr" "(" Typ "->" Typ ")";
TCmd.  Typ ::= "cmd";
TNat.  Typ ::= "nat";
TUnit. Typ ::= "unit";

-- Commands
CRet. Cmd ::= "ret" Exp;
CBnd. Cmd ::= "bnd" Var "<-" Exp ";" Cmd;
CDcl. Cmd ::= "dcl" Sym "in" Cmd;
CGap. Cmd ::= Uni "(" Exp ")";
CCap. Cmd ::= "Controlled" Uni "(" Exp "," Exp ")";
CGet. Cmd ::= "get" "[" Sym "]";
CSet. Cmd ::= "set" "[" Sym "]" "(" Exp ")";


internal EVarT. Exp ::= "(" Var ":" Typ ")";

{-

  # Build and run using:

      ```
      bnfc -d -m LambdaQs.cf  &&  make
      ./LambdaQs/Test
      ```

  # Examples:

  ## Sugared Syntax

cmd Controlled X (q1, q2)

let q2 be q1 in
cmd Controlled X (q1, q2)

let q1 be &q in
let q2 be q1 in
cmd Controlled X (q1, q2)

cmd dcl q in
ret let q1 be &q in
let q2 be q1 in
cmd Controlled X (q1, q2)

Output for last one:

ECmd (CDcl (MSym (Ident "q")) (CRet (ELet (MVar (Ident "q1")) (EQloc (MSym (Ident "q"))) (ELet (MVar (Ident "q2")) (EVar (MVar (Ident "q1"))) (ECmd (CCap (MUni (Ident "X")) (EVar (MVar (Ident "q1"))) (EVar (MVar (Ident "q2")))))))))

    ## Core Syntax

let(q1;q2.cmd(ctrlapr(q1;q2;X)))

let(qloc[q];q1.let(q1;q2.cmd(ctrlapr(q1;q2;X))))

cmd(dcl(q.ret(let(qloc[q];q1.let(q1;q2.cmd(ctrlapr(q1;q2;X)))))))

Output for last one:

ECmd (CDcl (MSym (Ident "q")) (CRet (ELet (EQloc (MSym (Ident "q"))) (MVar (Ident "q1")) (ELet (EVar (MVar (Ident "q1"))) (MVar (Ident "q2")) (ECmd (CCap (EVar (MVar (Ident "q1"))) (EVar (MVar (Ident "q2"))) (MUni (Ident "X"))))))))

-}
